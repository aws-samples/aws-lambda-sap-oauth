AWSTemplateFormatVersion: 2010-09-09

Description: >-
  AWS CloudFormation template to create various API Gateway rest APIs for the SAP demo

#*************************************************
# Parameters
#*************************************************
Parameters:
  CognitoProviderARNs:
    Description: List of Cognito Provider ARNs
    Type: List<String>
    Default: "arn:aws:cognito-idp:us-east-1:986292074609:userpool/us-east-1_CQzLRBYM1"
    AllowedPattern: ".+"
    ConstraintDescription: Cognito user pools is required

  SAPOAuthLambdaARN:
    Description: ARN of the sap-oauth-token-generator lambda function
    Type: String
    Default: "arn:aws:lambda:us-east-1:986292074609:function:sap-oauth-token-generator"
    AllowedPattern: ".+"
    ConstraintDescription: Lambda function ARN is required
  
  SAPProxyLambdaARN:
    Description: ARN of the aws-apigw-sap-proxy lambda function
    Type: String
    Default: "arn:aws:lambda:us-east-1:986292074609:function:aws-apigw-sap-proxy"
    AllowedPattern: ".+"
    ConstraintDescription: Lambda function ARN is required
  
  SAPSAMLKeyS3Bucket:
    Description: S3 Bucket where SAML keys are stored
    Type: String
    Default: 986292074609-us-east-1-aws-sap-demo-artifacts
    AllowedPattern: ".+"
    ConstraintDescription: SAML key S3 Bucket is required

  SAPSAMLPrivKeyS3Location:
    Description: SAML Private key file name
    Type: String
    Default: aws-sap-saml-keys/key.pem
    AllowedPattern: ".+"
    ConstraintDescription: Private key file location is required

  SAPSAMLCertS3Location:
    Description: SAML certificate file name
    Type: String
    Default: aws-sap-saml-keys/certificate.pem
    AllowedPattern: ".+"
    ConstraintDescription: Certificate file location is required

  SAPLoadBalancerNLBHost:
    Description: SAP Network Load Balancer Host name
    Type: String
    Default: sapapigwABAPNLB-08530be601224d55.elb.us-east-1.amazonaws.com
    AllowedPattern: ".+"
    ConstraintDescription: Network load balancer host name is required

  SAPHostSecure:
    Description: SAP Developer edition host name with secure port number
    Type: String
    Default: vhcalnplci.dummy.nodomain:44300
    AllowedPattern: ".+"
    ConstraintDescription: SAP Developer edition host name is required

  DDBTableName:
    Description: DynamoDB table name
    Type: String
    Default: sap-oauth-tokens

  SecretName:
    Description: Name of the Secret to store in Secret Manager
    Type: String
    Default: "aws_sap_demo_apps"

#*************************************************
# Resources
#*************************************************
Resources:

  #Create SAPOAuthAPI
  SAPOAuthAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: sap-oauth-token-generator
      Description: Retrives OAuth token from SAP based on the Cognito user ID used to access this API
      EndpointConfiguration:
        Types:
          - REGIONAL
  
  #Create Cognito Authorizer
  SAPOAuthCognitoAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      Name: "SAP_Demo_User_Pool"
      Type: COGNITO_USER_POOLS
      ProviderARNs: !Ref CognitoProviderARNs
      RestApiId: !Ref SAPOAuthAPI
      IdentitySource: "method.request.header.Authorization"

  # Create Method Post for the SAPOAuthAPI
  SAPOAuthPost:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref SAPOAuthAPI
      ResourceId: !GetAtt SAPOAuthAPI.RootResourceId
      HttpMethod: POST
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref SAPOAuthCognitoAuthorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SAPOAuthLambdaARN}/invocations
      MethodResponses:
        - 
          StatusCode: "200"
          ResponseModels:
            application/json: Empty

  #Give the above method/authorizer access to the lambda function
  SAPOAuthLambdaAccess:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref SAPOAuthLambdaARN
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${SAPOAuthAPI}/*/*/*

  #Deploy the API
  SAPOAuthDeployment:
    DependsOn: SAPOAuthPost
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId:  !Ref SAPOAuthAPI
      Description: "Default deployment"
      StageName: "dev"

   #Stage variables
  SAPOAuthLatestStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      StageName: "latest"
      Description: "Latest deployment"
      RestApiId: !Ref SAPOAuthAPI
      DeploymentId: !Ref SAPOAuthDeployment

  #Create SAPProxyAPI
  SAPProxyAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: aws-sap-proxy
      Description: Proxies calls to backend SAP systems after getting the OAuth access tokens
      EndpointConfiguration:
        Types:
          - REGIONAL
  
  #Create Cognito Authorizer
  SAPProxyCognitoAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      Name: "SAP_Demo_User_Pool"
      Type: COGNITO_USER_POOLS
      ProviderARNs: !Ref CognitoProviderARNs
      RestApiId: !Ref SAPProxyAPI
      IdentitySource: "method.request.header.Authorization"

  #Create API resources        
  metadataResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref SAPProxyAPI
      ParentId: !GetAtt SAPProxyAPI.RootResourceId
      PathPart: 'metadata'

  metadataProxyGet:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref SAPProxyAPI
      ResourceId: !Ref metadataResource
      HttpMethod: GET
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref SAPProxyCognitoAuthorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SAPProxyLambdaARN}/invocations

  #Give the above method/authorizer access to the lambda function
  metadataLambdaAccess:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref SAPProxyLambdaARN
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${SAPProxyAPI}/*/*/*

  #Enable CORS
  metadataOptions:
    Type: AWS::ApiGateway::Method
    Properties:
        RestApiId: !Ref SAPProxyAPI
        ResourceId: !Ref metadataResource
        HttpMethod: OPTIONS
        AuthorizationType: NONE
        Integration:
          Type: MOCK
          IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-CSRF-Token,aws-sap-oauth-token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
            StatusCode: '200'
          PassthroughBehavior: NEVER
          RequestTemplates:
            application/json: '{"statusCode": 200}'
        MethodResponses:
            - ResponseModels:
                application/json: Empty
              ResponseParameters:
                method.response.header.Access-Control-Allow-Headers: true
                method.response.header.Access-Control-Allow-Methods: true
                method.response.header.Access-Control-Allow-Origin: true
              StatusCode: '200'

  #Create API resources        
  accesstokenResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref SAPProxyAPI
      ParentId: !GetAtt SAPProxyAPI.RootResourceId
      PathPart: 'accesstoken'

  accesstokenProxyGet:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref SAPProxyAPI
      ResourceId: !Ref accesstokenResource
      HttpMethod: GET
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref SAPProxyCognitoAuthorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SAPProxyLambdaARN}/invocations

  #Enable CORS
  accesstokenOptions:
    Type: AWS::ApiGateway::Method
    Properties:
        RestApiId: !Ref SAPProxyAPI
        ResourceId: !Ref accesstokenResource
        HttpMethod: OPTIONS
        AuthorizationType: NONE
        Integration:
          Type: MOCK
          IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-CSRF-Token,aws-sap-oauth-token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
            StatusCode: '200'
          PassthroughBehavior: NEVER
          RequestTemplates:
            application/json: '{"statusCode": 200}'
        MethodResponses:
            - ResponseModels:
                application/json: Empty
              ResponseParameters:
                method.response.header.Access-Control-Allow-Headers: true
                method.response.header.Access-Control-Allow-Methods: true
                method.response.header.Access-Control-Allow-Origin: true
              StatusCode: '200'

  sapResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref SAPProxyAPI
      ParentId: !GetAtt SAPProxyAPI.RootResourceId
      PathPart: 'sap' 
  
  opuResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref SAPProxyAPI
      ParentId: !Ref sapResource
      PathPart: 'opu' 

  odataResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref SAPProxyAPI
      ParentId: !Ref opuResource
      PathPart: 'odata' 

  SAPProxyResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref SAPProxyAPI
      ParentId: !Ref odataResource
      PathPart: '{proxy+}'

  SAPProxyANY:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref SAPProxyAPI
      ResourceId: !Ref SAPProxyResource
      HttpMethod: ANY
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref SAPProxyCognitoAuthorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SAPProxyLambdaARN}/invocations

  #Enable CORS
  SAPProxyOPTIONS:
    Type: AWS::ApiGateway::Method
    Properties:
        RestApiId: !Ref SAPProxyAPI
        ResourceId: !Ref SAPProxyResource
        HttpMethod: OPTIONS
        AuthorizationType: NONE
        Integration:
          Type: MOCK
          IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-CSRF-Token,aws-sap-oauth-token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
            StatusCode: '200'
          PassthroughBehavior: NEVER
          RequestTemplates:
            application/json: '{"statusCode": 200}'
        MethodResponses:
            - ResponseModels:
                application/json: Empty
              ResponseParameters:
                method.response.header.Access-Control-Allow-Headers: true
                method.response.header.Access-Control-Allow-Methods: true
                method.response.header.Access-Control-Allow-Origin: true
              StatusCode: '200'

  #Deploy the API
  SAPProxyDeployment:
    DependsOn: SAPProxyANY
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId:  !Ref SAPProxyAPI
      Description: "Default deployment"
      StageName: "dev"

  #Update Stage properties
  SAPProxyDevStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      StageName: "latest"
      Description: "Latest deployment"
      RestApiId: !Ref SAPProxyAPI
      DeploymentId: !Ref SAPProxyDeployment
      Variables:
        aws_logging_enabled: "true"
        aws_logs_to_screen: "true"
        aws_bucket: !Ref SAPSAMLKeyS3Bucket
        aws_key_file: !Ref SAPSAMLPrivKeyS3Location
        aws_cert_file: !Ref SAPSAMLCertS3Location
        aws_nlb_host: !Ref SAPLoadBalancerNLBHost
        aws_sap_token_scope: "ZGWSAMPLE_BASIC_0001"
        scope: "ZGWSAMPLE_BASIC_0001"
        saml_issuer: "AWSLambda"
        saml_nameid_format: "urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified"
        saml_audience_restriction: "NPL_001"
        saml_session_authentication: "urn:none"
        SAP_DEMO_APP_SECRET: !Ref SecretName
        ddb_token_store: !Ref DDBTableName
        aws_nlb_url:
          !Join
            - ""
            - - "https://"
              - !Ref SAPLoadBalancerNLBHost
              - "/sap/bc/sec/oauth2/token"
        oa2_endpoint_host: !Ref SAPHostSecure
        oa2_token_endpoint: 
          !Join
          - ""
          - - "https://"
            - !Ref SAPHostSecure
            - "/sap/bc/sec/oauth2/token"
        aws_sap_token_generator_api:
          !Join
            - ""
            - - !Ref SAPOAuthAPI
              - ".execute-api."
              - !Ref AWS::Region
              - ".amazonaws.com/latest"
#*************************************************
# Outputs
#*************************************************
Outputs:
  SAPOAuthUrl:
    Value: !Join
    - ""
    - -  "https://"
      -  !Ref SAPOAuthAPI
      - ".execute-api."
      - !Ref AWS::Region
      - ".amazonaws.com/latest"
    Description: OAuth URL of the default stage

  SAPProxyUrl:
    Value: !Join
    - ""
    - -  "https://"
      -  !Ref SAPProxyAPI
      - ".execute-api."
      - !Ref AWS::Region
      - ".amazonaws.com/latest"
    Description: OAuth URL of the default stage

